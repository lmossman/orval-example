{
  "type": "object",
  "required": ["version", "checker", "streams"],
  "properties": {
    "version": {
      "type": "string"
    },
    "checker": {
      "$ref": "#/definitions/CheckStream"
    },
    "streams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeclarativeStream"
      }
    }
  },
  "description": "ConcreteDeclarativeSource(version: str, checker: airbyte_cdk.sources.declarative.checks.check_stream.CheckStream, streams: List[airbyte_cdk.sources.declarative.declarative_stream.DeclarativeStream])",
  "$schema": "http://json-schema.org/draft-06/schema#",
  "definitions": {
    "CheckStream": {
      "type": "object",
      "required": ["stream_names"],
      "properties": {
        "stream_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "\n    Checks the connections by trying to read records from one or many of the streams selected by the developer\n\n    Attributes:\n        stream_name (List[str]): name of streams to read records from\n    "
    },
    "DeclarativeStream": {
      "type": "object",
      "required": ["schema_loader", "retriever", "config"],
      "properties": {
        "schema_loader": {
          "anyOf": [
            {
              "$ref": "#/definitions/JsonFileSchemaLoader"
            },
            {
              "$ref": "#/definitions/DefaultSchemaLoader"
            }
          ]
        },
        "_schema_loader": {
          "anyOf": [
            {
              "$ref": "#/definitions/JsonFileSchemaLoader"
            },
            {
              "$ref": "#/definitions/DefaultSchemaLoader"
            }
          ]
        },
        "retriever": {
          "$ref": "#/definitions/SimpleRetriever"
        },
        "config": {
          "type": "object"
        },
        "name": {
          "type": "string",
          "default": "<property object at 0x1064298a0>"
        },
        "_name": {
          "type": "string",
          "default": ""
        },
        "primary_key": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "type": "string"
            }
          ],
          "default": "<property object at 0x106429760>"
        },
        "_primary_key": {
          "type": "string",
          "default": ""
        },
        "stream_cursor_field": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "checkpoint_interval": {
          "type": "integer"
        }
      },
      "description": "\n    DeclarativeStream is a Stream that delegates most of its logic to its schema_load and retriever\n\n    Attributes:\n        name (str): stream name\n        primary_key (Optional[Union[str, List[str], List[List[str]]]]): the primary key of the stream\n        schema_loader (SchemaLoader): The schema loader\n        retriever (Retriever): The retriever\n        config (Config): The user-provided configuration as specified by the source's spec\n        stream_cursor_field (Optional[List[str]]): The cursor field\n        transformations (List[RecordTransformation]): A list of transformations to be applied to each output record in the\n        stream. Transformations are applied in the order in which they are defined.\n        checkpoint_interval (Optional[int]): How often the stream will checkpoint state (i.e: emit a STATE message)\n    "
    },
    "JsonSchema": {
      "allOf": [
        {
          "$ref": "#/definitions/SchemaLoader"
        },
        {
          "type": "object",
          "required": ["file_path", "config"],
          "properties": {
            "file_path": {
              "anyOf": [
                {
                  "$ref": "#/definitions/InterpolatedString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "config": {
              "type": "object"
            }
          }
        }
      ],
      "description": "\n    Loads the schema from a json file\n\n    Attributes:\n        file_path (Union[InterpolatedString, str]): The path to the json file describing the schema\n        name (str): The stream's name\n        config (Config): The user-provided configuration as specified by the source's spec\n        options (Mapping[str, Any]): Additional arguments to pass to the string interpolation if needed\n    "
    },
    "InterpolatedString": {
      "type": "object",
      "required": ["string"],
      "properties": {
        "string": {
          "type": "string"
        },
        "default": {
          "type": "string"
        }
      },
      "description": "\n    Wrapper around a raw string to be interpolated with the Jinja2 templating engine\n\n    Attributes:\n        string (str): The string to evalute\n        default (Optional[str]): The default value to return if the evaluation returns an empty string\n        options (Mapping[str, Any]): Additional runtime parameters to be used for string interpolation\n    "
    },
    "JsonFileSchemaLoader": {
      "allOf": [
        {
          "$ref": "#/definitions/SchemaLoader"
        },
        {
          "type": "object",
          "required": ["config"],
          "properties": {
            "config": {
              "type": "object"
            },
            "file_path": {
              "anyOf": [
                {
                  "$ref": "#/definitions/InterpolatedString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "description": "\n    Loads the schema from a json file\n\n    Attributes:\n        file_path (Union[InterpolatedString, str]): The path to the json file describing the schema\n        name (str): The stream's name\n        config (Config): The user-provided configuration as specified by the source's spec\n        options (Mapping[str, Any]): Additional arguments to pass to the string interpolation if needed\n    "
    },
    "SchemaLoader": {
      "type": "object",
      "properties": {},
      "description": "Describes a stream's schema"
    },
    "DefaultSchemaLoader": {
      "allOf": [
        {
          "$ref": "#/definitions/SchemaLoader"
        },
        {
          "type": "object",
          "required": ["config"],
          "properties": {
            "config": {
              "type": "object"
            }
          }
        }
      ],
      "description": "\n    Loads a schema from the default location or returns an empty schema for streams that have not defined their schema file yet.\n\n    Attributes:\n        config (Config): The user-provided configuration as specified by the source's spec\n        options (Mapping[str, Any]): Additional arguments to pass to the string interpolation if needed\n    "
    },
    "SimpleRetriever": {
      "allOf": [
        {
          "$ref": "#/definitions/Retriever"
        },
        {
          "type": "object",
          "required": ["requester", "record_selector"],
          "properties": {
            "requester": {
              "type": "string"
            },
            "record_selector": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "primary_key": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "string"
                }
              ],
              "default": "<property object at 0x1064073d0>"
            }
          }
        }
      ],
      "description": "\n    Retrieves records by synchronously sending requests to fetch records.\n\n    The retriever acts as an orchestrator between the requester, the record selector, the paginator, and the stream slicer.\n\n    For each stream slice, submit requests until there are no more pages of records to fetch.\n\n    This retriever currently inherits from HttpStream to reuse the request submission and pagination machinery.\n    As a result, some of the parameters passed to some methods are unused.\n    The two will be decoupled in a future release.\n\n    Attributes:\n        stream_name (str): The stream's name\n        stream_primary_key (Optional[Union[str, List[str], List[List[str]]]]): The stream's primary key\n        requester (Requester): The HTTP requester\n        record_selector (HttpSelector): The record selector\n        paginator (Optional[Paginator]): The paginator\n        stream_slicer (Optional[StreamSlicer]): The stream slicer\n        options (Mapping[str, Any]): Additional runtime parameters to be used for string interpolation\n    "
    },
    "Retriever": {
      "type": "object",
      "properties": {},
      "description": "\n    Responsible for fetching a stream's records from an HTTP API source.\n    "
    }
  }
}

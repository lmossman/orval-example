/**
 * Generated by orval v6.11.0-alpha.8 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
/**
 * 
    Responsible for fetching a stream's records from an HTTP API source.
    
 */
export interface Retriever {
  [key: string]: any;
}

/**
 * Describes a stream's schema
 */
export interface SchemaLoader {
  [key: string]: any;
}

/**
 * 
    Wrapper around a raw string to be interpolated with the Jinja2 templating engine

    Attributes:
        string (str): The string to evalute
        default (Optional[str]): The default value to return if the evaluation returns an empty string
        options (Mapping[str, Any]): Additional runtime parameters to be used for string interpolation
    
 */
export interface InterpolatedString {
  string: string;
  default?: string;
}

export type DeclarativeStreamStreamCursorField = string[] | string;

export type DeclarativeStreamPrimaryKey = string[] | string[][] | string;

export type DeclarativeStreamConfig = { [key: string]: any };

/**
 * 
    DeclarativeStream is a Stream that delegates most of its logic to its schema_load and retriever

    Attributes:
        name (str): stream name
        primary_key (Optional[Union[str, List[str], List[List[str]]]]): the primary key of the stream
        schema_loader (SchemaLoader): The schema loader
        retriever (Retriever): The retriever
        config (Config): The user-provided configuration as specified by the source's spec
        stream_cursor_field (Optional[List[str]]): The cursor field
        transformations (List[RecordTransformation]): A list of transformations to be applied to each output record in the
        stream. Transformations are applied in the order in which they are defined.
        checkpoint_interval (Optional[int]): How often the stream will checkpoint state (i.e: emit a STATE message)
    
 */
export interface DeclarativeStream {
  schema_loader: JsonSchema;
  retriever: SimpleRetriever;
  config: DeclarativeStreamConfig;
  name?: string;
  _name?: string;
  primary_key?: DeclarativeStreamPrimaryKey;
  _primary_key?: string;
  stream_cursor_field?: DeclarativeStreamStreamCursorField;
  checkpoint_interval?: number;
}

/**
 * 
    Checks the connections by trying to read records from one or many of the streams selected by the developer

    Attributes:
        stream_name (List[str]): name of streams to read records from
    
 */
export interface CheckStream {
  stream_names: string[];
}

/**
 * ConcreteDeclarativeSource(version: str, checker: airbyte_cdk.sources.declarative.checks.check_stream.CheckStream, streams: List[airbyte_cdk.sources.declarative.declarative_stream.DeclarativeStream])
 */
export interface ConfigComponentSchema {
  version: string;
  checker: CheckStream;
  streams: DeclarativeStream[];
}

export interface OriginLocation {
  country: string;
  city?: string;
}

export interface Ancestry {
  origin_location?: OriginLocation;
  timespan_years: number;
}

export interface Breed {
  name: string;
  size: string;
  ancestry: Ancestry;
}

export type CreatePetsBody = {
  name: string;
  tag: string;
};

export type ListPetsParams = { limit?: string };

export interface Error {
  code: number;
  message: string;
}

export interface Pet {
  id: number;
  name: string;
  tag?: string;
  breed?: Breed;
  manifest?: ConfigComponentSchema;
}

export type Pets = Pet[];

/**
 * @summary List all pets
 */
export const listPets = <TData = AxiosResponse<Pets>>(
  params?: ListPetsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/pets`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * @summary Create a pet
 */
export const createPets = <TData = AxiosResponse<void>>(
  createPetsBody: CreatePetsBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/pets`, createPetsBody, options);
};

/**
 * @summary Info for a specific pet
 */
export const showPetById = <TData = AxiosResponse<Pet>>(
  petId: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/pets/${petId}`, options);
};

export type ListPetsResult = AxiosResponse<Pets>;
export type CreatePetsResult = AxiosResponse<void>;
export type ShowPetByIdResult = AxiosResponse<Pet>;
